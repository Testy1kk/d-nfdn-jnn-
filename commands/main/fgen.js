const { MessageEmbed } = require('discord.js');
const fs = require('fs');
const config = require('../../config.json');

const generated = new Set();

module.exports = {
  name: 'fgen',
  description: 'Generate a specified service if stocked (free)',
  usage: 'fgen <service>',
  execute(message, args) {
    if (message.channel.id !== config.fgenChannel) {
      return message.channel.send(
        new MessageEmbed()
          .setColor(config.color.red)
          .setTitle('Wrong command usage!')
          .setDescription(`You cannot use the \`fgen\` command in this channel! Try it in <#${config.fgenChannel}>!`)
          .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
          .setTimestamp()
      );
    }

    if (generated.has(message.author.id)) {
      return message.channel.send(
        new MessageEmbed()
          .setColor(config.color.red)
          .setTitle('Cooldown!')
          .setDescription(`Please wait **${config.fgenCooldown / 60000}m** before executing that command again!`)
          .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
          .setTimestamp()
      );
    }

    const service = args[0];
    if (!service) {
      return message.channel.send(
        new MessageEmbed()
          .setColor(config.color.red)
          .setTitle('Missing parameters!')
          .setDescription('You need to provide a service name!')
          .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
          .setTimestamp()
      );
    }

    const filePath = `${__dirname}/../../fstock/${service}.txt`;

    fs.readFile(filePath, 'utf8', (error, data) => {
      if (error) {
        return message.channel.send(
          new MessageEmbed()
            .setColor(config.color.red)
            .setTitle('Generator error!')
            .setDescription(`Service \`${service}\` does not exist!`)
            .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
            .setTimestamp()
        );
      }

      const lines = data.split('\n');
      if (lines.length === 0 || lines[0].trim() === '') {
        return message.channel.send(
          new MessageEmbed()
            .setColor(config.color.red)
            .setTitle('Generator error!')
            .setDescription(`The \`${service}\` service is empty!`)
            .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
            .setTimestamp()
        );
      }

      const generatedCode = lines[0].trim();
      const updatedData = lines.slice(1).join('\n');

      // Send DM to the user with the generated code
      const currentTime = new Date();
      const formattedTime = `${currentTime.getFullYear()}-${(currentTime.getMonth() + 1).toString().padStart(2, '0')}-${currentTime.getDate().toString().padStart(2, '0')} ${currentTime.getHours().toString().padStart(2, '0')}:${currentTime.getMinutes().toString().padStart(2, '0')}:${currentTime.getSeconds().toString().padStart(2, '0')}`;

      const redemptionEmbed = new MessageEmbed()
        .setColor(config.color.green)
        .setTitle('NEXUS G3N')
        .setDescription('**Follow these steps to redeem your code:**\nStep 1: Click on this [LINK](https://link-center.net/991963/blue-gen-verify), complete some steps, and register with your Discord nickname.\nStep 2: Go to the Ticket channel\nStep 3: Click on Redeem a code\nStep 4: Send this code to staff:')
        .addField('Code', `\`\`\`${generatedCode}\`\`\``)
        .setFooter(`Generated by NEXUS G3N â€¢ ${formattedTime}`);

      message.author.send({ embeds: [redemptionEmbed] }).catch((err) => {
        console.error(`Failed to send DM to ${message.author.tag}: ${err}`);
      });

      // Save the code to redeemcodes.txt
      const redeemFilePath = `${__dirname}/../../redeemcodes/redeemcodes.txt`;
      fs.appendFile(redeemFilePath, `${generatedCode} - ${service} in free category\n`, (err) => {
        if (err) {
          console.error(`Failed to append to redeemcodes.txt: ${err}`);
        }
      });

      // Update the service file
      fs.writeFile(filePath, updatedData, (err) => {
        if (err) {
          console.error(`Failed to write to ${filePath}: ${err}`);
        }

        message.channel.send(
          new MessageEmbed()
            .setColor(config.color.green)
            .setTitle('Account generated successfully!')
            .setDescription(`Check your private messages ${message.author}! If you do not receive the message, please make sure your DMs are open.`)
            .setImage(config.gif) // Use the URL from config.json
            .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
            .setTimestamp()
        );

        generated.add(message.author.id);
        setTimeout(() => {
          generated.delete(message.author.id);
        }, config.fgenCooldown);
      });
    });
  },
};